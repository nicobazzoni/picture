/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/camera_animation.glb
Author: andreak.riveram (https://sketchfab.com/andreak.riveram)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/camera-animation-5a6e66534f59481db1567c8d74c81de6
Title: camera animation
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, OrbitControls, Trail  } from '@react-three/drei'
import { Canvas } from '@react-three/fiber'
import * as THREE from 'three'

import { useSpring, animated } from '@react-spring/web';



const Model = (props) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/camera_animation.glb')
  const { actions, names } = useAnimations(animations, group)
  
  
  useEffect (() => {

    actions[names[0]].reset().fadeIn(0.5).play()
  }, [actions, names])



  const [spring, set] = useSpring(() => ({ scale: 1 }));

  const Scale = () => {
    set({ scale: 1.5 });
    setTimeout(() => {
      set({ scale: 1 });
    }, 1000);
  };



  
  
  return (
    <group ref={group} position={[0,5,10]} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Armature_8">
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  
                  <group name="cctv_lowpoly_7"  /> 
                  <mesh onClick={Scale} name="cctv_lowpoly_7" position={[0, 0, 0]} rotation={[0, 0, 0]} scale={[0.1, 0.1, 0.1]} >

                  <skinnedMesh name="Object_7" geometry={nodes.Object_7.geometry} material={materials['05___Default']} skeleton={nodes.Object_7.skeleton} />
                  <skinnedMesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials['Material.001']} skeleton={nodes.Object_8.skeleton} />
                  <skinnedMesh name="Object_9" geometry={nodes.Object_9.geometry} material={materials['Material.002']} skeleton={nodes.Object_9.skeleton} />
                  <skinnedMesh name="Object_10" geometry={nodes.Object_10.geometry} material={materials['Material.003']} skeleton={nodes.Object_10.skeleton} />
                  <skinnedMesh name="Object_11" geometry={nodes.Object_11.geometry} material={materials['Material.004']} skeleton={nodes.Object_11.skeleton} />
                  <skinnedMesh name="Object_12" geometry={nodes.Object_12.geometry} material={materials['Material.006']} skeleton={nodes.Object_12.skeleton} />
               </mesh> </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/camera_animation.glb')



function Instances({ count = 500, temp = new THREE.Object3D() }) {
  const ref = useRef()
  useEffect(() => {
    // Set positions
    for (let i = 0; i < count; i++) {
      temp.position.set( Math.random() * 50, Math.random() * 50, Math.random() * 50)
      temp.updateMatrix()
      ref.current.setMatrixAt(i, temp.matrix)
    }
    // Update the instance
    ref.current.instanceMatrix.needsUpdate = true
  }, [])
  return (
    <instancedMesh ref={ref} args={[null, null, count]}>
      <boxGeometry />
      <meshPhongMaterial />
    </instancedMesh>
  )
}







const Camera = (props) => {
  return (
    
    <Canvas camera={[1,2,2 ]} fov={[ 0.2 ]} frameloop="demand"  >
      <ambientLight intensity={0.5} />
      <spotLight position={[10, 15, 10]} angle={0.3} penumbra={1} />
      <pointLight position={[10, 10, 10]} />
      
    
      <OrbitControls />
    
      <Model   {...props} />

   <Instances />

    </Canvas>
  )
}

export default Camera
